import OpenAPIClientAxios, {
  Document,
  OperationResponse,
  Parameters,
} from 'openapi-client-axios';
import {
  errorInterceptor,
  TApiBody as TApiBodyBase,
  TApiArgs as TApiArgsBase,
  TApiResponse as TApiResponseBase,
} from '@fuks-ru/common';

import { Client, defaultBaseUrl, OperationMethods, Components } from './client';
import schema from './swagger-schema.json';

export type TMethods = keyof OperationMethods;
export { OperationResponse };
export { AxiosRequestConfig } from 'axios';

/**
 * Получает api-контракт для работы с blog-backend.
 */
export const getApi = async (baseURL = defaultBaseUrl): Promise<Client> => {
  const api = new OpenAPIClientAxios({
    definition: schema as Document,
    axiosConfigDefaults: {
      baseURL,
      withCredentials: true,
    },
  });

  const apiInstance = await api.init<Client>();

  apiInstance.defaults.headers.patch['Content-Type'] = 'application/json';
  apiInstance.defaults.headers.post['Content-Type'] = 'application/json';
  apiInstance.defaults.headers.put['Content-Type'] = 'application/json';
  apiInstance.defaults.headers.delete['Content-Type'] = 'application/json';
  apiInstance.interceptors.response.use(undefined, errorInterceptor);

  return apiInstance;
};

/**
 * Описания типа возвращаемого с бэка значения.
 */
export type TApiResponse<Method extends TMethods = TMethods> = TApiResponseBase<OperationMethods, Method>;

/**
 * Описания типа тела запроса.
 */
export type TApiBody<Method extends TMethods = TMethods> = TApiBodyBase<OperationMethods, Method>;

/**
 * Описания типа аргументов url'а запроса.
 */
export declare type TApiArgs<Method extends TMethods = TMethods> = TApiArgsBase<OperationMethods, Method>;

/**
 * Описание схемы клиента.
 */
export type {
  Client,
  Paths,
} from './client';

export import Schemas = Components.Schemas;
